//------------------------------------------------------------------------------
//  cube-sapp/module.jai
//------------------------------------------------------------------------------
#import "Basic";
#import "Math";
#import,dir "../../sokol/gfx"(USE_GL=USE_GL);
#import,dir "../../sokol/app"(USE_GL=USE_GL);
#import,dir "../../sokol/log"(USE_GL=USE_GL);
#import,dir "../../sokol/glue"(USE_GL=USE_GL);
#load "../math.jai";
#load "./shader.jai";

state: struct {
    rx, ry: float;
    pip:    sg_pipeline;
    bind:   sg_bindings;
}

init :: () #c_call {
    push_context,defer_pop;

    sg_setup(*(sg_desc.{
        environment = xx,force sglue_environment(),
        logger.func = slog_func,
    }));

    /* cube vertex buffer */
    vertices := float.[
        -1.0, -1.0, -1.0,   1.0, 0.0, 0.0, 1.0,
         1.0, -1.0, -1.0,   1.0, 0.0, 0.0, 1.0,
         1.0,  1.0, -1.0,   1.0, 0.0, 0.0, 1.0,
        -1.0,  1.0, -1.0,   1.0, 0.0, 0.0, 1.0,

        -1.0, -1.0,  1.0,   0.0, 1.0, 0.0, 1.0,
         1.0, -1.0,  1.0,   0.0, 1.0, 0.0, 1.0,
         1.0,  1.0,  1.0,   0.0, 1.0, 0.0, 1.0,
        -1.0,  1.0,  1.0,   0.0, 1.0, 0.0, 1.0,

        -1.0, -1.0, -1.0,   0.0, 0.0, 1.0, 1.0,
        -1.0,  1.0, -1.0,   0.0, 0.0, 1.0, 1.0,
        -1.0,  1.0,  1.0,   0.0, 0.0, 1.0, 1.0,
        -1.0, -1.0,  1.0,   0.0, 0.0, 1.0, 1.0,

        1.0, -1.0, -1.0,    1.0, 0.5, 0.0, 1.0,
        1.0,  1.0, -1.0,    1.0, 0.5, 0.0, 1.0,
        1.0,  1.0,  1.0,    1.0, 0.5, 0.0, 1.0,
        1.0, -1.0,  1.0,    1.0, 0.5, 0.0, 1.0,

        -1.0, -1.0, -1.0,   0.0, 0.5, 1.0, 1.0,
        -1.0, -1.0,  1.0,   0.0, 0.5, 1.0, 1.0,
         1.0, -1.0,  1.0,   0.0, 0.5, 1.0, 1.0,
         1.0, -1.0, -1.0,   0.0, 0.5, 1.0, 1.0,

        -1.0,  1.0, -1.0,   1.0, 0.0, 0.5, 1.0,
        -1.0,  1.0,  1.0,   1.0, 0.0, 0.5, 1.0,
         1.0,  1.0,  1.0,   1.0, 0.0, 0.5, 1.0,
         1.0,  1.0, -1.0,   1.0, 0.0, 0.5, 1.0
    ];
    vbuf := sg_make_buffer(*(sg_buffer_desc.{
        usage = .{ index_buffer = true },
        data = .{ *vertices, size_of(type_of(vertices)) },
        label = "cube-vertices"
    }));

    /* create an index buffer for the cube */
    indices := u16.[
        0, 1, 2,  0, 2, 3,
        6, 5, 4,  7, 6, 4,
        8, 9, 10,  8, 10, 11,
        14, 13, 12,  15, 14, 12,
        16, 17, 18,  16, 18, 19,
        22, 21, 20,  23, 22, 20
    ];
    ibuf := sg_make_buffer(*(sg_buffer_desc.{
        data = .{ *indices, size_of(type_of(indices)) },
        label = "cube-indices"
    }));

    /* create shader */
    shd := sg_make_shader(*cube_shader_desc(sg_query_backend()));

    /* create pipeline object */
    pipeline_desc := sg_pipeline_desc.{
        layout = .{
            /* test to provide buffer stride, but no attr offsets */
            buffers[0].stride = 28,
        },
        shader = shd,
        index_type = .UINT16,
        cull_mode = .BACK,
        depth = .{
            write_enabled = true,
            compare = .LESS_EQUAL,
        },
        label = "cube-pipeline"
    };
    pipeline_desc.layout.attrs[ATTR_cube_position].format = .FLOAT3;
    pipeline_desc.layout.attrs[ATTR_cube_color0].format   = .FLOAT4;
    state.pip = sg_make_pipeline(*(pipeline_desc));

    /* setup resource bindings */
    state.bind = .{
        vertex_buffers[0] = vbuf,
        index_buffer = ibuf
    };
}

frame :: () #c_call {
    push_context,defer_pop;

    /* NOTE: the vs_params_t struct has been code-generated by the shader-code-gen */
    vs_params: Vs_Params;
    w := sapp_widthf();
    h := sapp_heightf();
    t := cast(float) (sapp_frame_duration() * 60.0);
    proj := persp_mat4(60.0, w/h, 0.01, 10.0);
    view := lookat_mat4(.{ 0.0, 1.5, 6.0 }, .{ 0.0, 0.0, 0.0 }, .{ 0.0, 1.0, 0.0 });
    view_proj := multiply_mat4(proj, view);
    state.rx += 1.0 * t; state.ry += 2.0 * t;
    rxm := rotate_mat4(state.rx, .{ 1.0, 0.0, 0.0 });
    rym := rotate_mat4(state.ry, .{ 0.0, 1.0, 0.0 });
    model := multiply_mat4(rxm, rym);
    vs_params.mvp = multiply_mat4(view_proj, model);

    sg_begin_pass(*(sg_pass.{
        action = .{
            colors[0] = .{
                load_action = .CLEAR,
                clear_value = .{ 0.25, 0.5, 0.75, 1.0 }
            },
        },
        swapchain = xx,force sglue_swapchain()
    }));
    sg_apply_pipeline(state.pip);
    sg_apply_bindings(*state.bind);
    sg_apply_uniforms(UB_vs_params, *(sg_range.{ *vs_params, size_of(type_of(vs_params)) }));
    sg_draw(0, 36, 1);
    sg_end_pass();
    sg_commit();
}

cleanup :: () #c_call {
    sg_shutdown();
}

main :: () {
    sapp_run(*(sapp_desc.{
        init_cb = init,
        frame_cb = frame,
        cleanup_cb = cleanup,
        width = 800,
        height = 600,
        sample_count = 4,
        window_title = "Cube (sokol-app)",
        icon.sokol_default = true,
        logger.func = slog_func,
    }));
}
